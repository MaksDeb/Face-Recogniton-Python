# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L2D3e7mtc41ESiz4zD9PKPomaacbqO04
"""

import numpy as np
import os
from PIL import Image

def load_images_and_labels(base_dir, class_labels):
    images = []
    labels = []

    for label, folder_name in class_labels.items():
        folder_path = os.path.join(base_dir, folder_name)
        for image_filename in os.listdir(folder_path):
            image_path = os.path.join(folder_path, image_filename)
            try:
                image = Image.open(image_path).convert('RGB')
                image_array = np.array(image)
                images.append(image_array)
                labels.append(label)
            except Exception as e:
                print(f"Błąd przy wczytywaniu obrazu {image_path}: {e}")

    return np.array(images), np.array(labels)

base_dir = '/content/drive/MyDrive/data'

class_labels = {
    1: 'moje',
    0: 'inne'
}

images, labels = load_images_and_labels(base_dir, class_labels)

print('Wczytano obrazy:', images.shape)
print('Wczytano etykiety:', labels.shape)

save_dir = '/content/drive/MyDrive/np_arrays'
if not os.path.exists(save_dir):
    os.makedirs(save_dir)

np.save(os.path.join(save_dir, 'images.npy'), images)
np.save(os.path.join(save_dir, 'labels.npy'), labels)
print('Zapisano obrazy i etykiety w:', save_dir)



import numpy as np
from sklearn.model_selection import train_test_split

path_to_images = '/content/drive/MyDrive/np_arrays/images.npy'
path_to_labels = '/content/drive/MyDrive/np_arrays/labels.npy'

images = np.load(path_to_images, mmap_mode='r')
labels = np.load(path_to_labels, mmap_mode='r')

X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
from sklearn.model_selection import train_test_split

model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(200, 200, 3)),
    Conv2D(64, (3, 3), activation='relu'),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(2, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history = model.fit(
    X_train, y_train,
    batch_size=16,
    epochs=30,
    validation_data=(X_test, y_test)
)

model.fit(X_train, y_train, epochs=4, batch_size=16, verbose=0)

results = model.evaluate(X_test, y_test)
print('Dokładność wytrenowanego modelu:')
print('\tEtykiety: ', model.metrics_names)
print('\tWartości: ', results)

model.save('/content/drive/MyDrive/model/wmapro4.h5')

print(X_train[0])